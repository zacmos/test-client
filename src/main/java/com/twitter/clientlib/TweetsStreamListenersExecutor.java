/*
 * Copyright 2020 Twitter, Inc.
 * SPDX-License-Identifier: Apache-2.0
 *
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.twitter.clientlib;


import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import com.google.gson.reflect.TypeToken;

import com.twitter.clientlib.model.StreamingTweet;

public class TweetsStreamListenersExecutor {
  private final ITweetsQueue tweetsQueue;
  private final List<TweetsStreamListener> listeners = new ArrayList<>();
  private final InputStream stream;

  public TweetsStreamListenersExecutor(InputStream stream) {
    this.tweetsQueue = new LinkedListTweetsQueue();
    this.stream = stream;
  }

  public TweetsStreamListenersExecutor(ITweetsQueue tweetsQueue, InputStream stream) {
    this.tweetsQueue = tweetsQueue;
    this.stream = stream;
  }

  public void addListener(TweetsStreamListener toAdd) {
    listeners.add(toAdd);
  }

  public void executeListeners() {
    if (stream == null) {
      System.out.println("Error: stream is null.");
      return;
    } else if (this.tweetsQueue == null) {
      System.out.println("Error: tweetsQueue is null.");
      return;
    }

    TweetsQueuer tweetsQueuer = new TweetsQueuer();
    TweetsListenersExecutor tweetsListenersExecutor = new TweetsListenersExecutor();
    tweetsListenersExecutor.start();
    tweetsQueuer.start();
  }

  private class TweetsListenersExecutor extends Thread {
    @Override
    public void run() {
      processTweets();
    }

    private void processTweets() {
      StreamingTweet streamingTweet;
      try {
        while (true) {
          streamingTweet = tweetsQueue.poll();
          if (streamingTweet == null) {
            Thread.sleep(100);
            continue;
          }
          for (TweetsStreamListener listener : listeners) {
            listener.actionOnTweetsStream(streamingTweet);
          }
        }
      } catch (Exception e) {
        e.printStackTrace();
        System.out.println(e);
      }
    }
  }

  private class TweetsQueuer extends Thread {
    @Override
    public void run() {
      queueTweets();
    }

    public void queueTweets() {
      JSON json = new JSON();
      Type localVarReturnType = new TypeToken<StreamingTweet>() {
      }.getType();

      try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {
        String line = reader.readLine();
        while (line != null) {
          StreamingTweet streamingTweet = new StreamingTweet();
          streamingTweet.setActualInstance(json.getGson().fromJson(line, localVarReturnType));
          tweetsQueue.add(streamingTweet);
          line = reader.readLine();
        }
      } catch (Exception e) {
        e.printStackTrace();
        System.out.println(e);
      }
    }
  }
}

interface ITweetsQueue {
  StreamingTweet poll();
  void add(StreamingTweet streamingTweet);
}

class LinkedListTweetsQueue implements ITweetsQueue {
  private final Queue<StreamingTweet> tweetsQueue = new LinkedList<>();

  @Override
  public StreamingTweet poll() {
    return tweetsQueue.poll();
  }

  @Override
  public void add(StreamingTweet streamingTweet) {
    tweetsQueue.add(streamingTweet);
  }
}
