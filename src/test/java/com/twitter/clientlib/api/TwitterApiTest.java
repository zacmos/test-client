/*
 * Copyright 2020 Twitter, Inc.
 * SPDX-License-Identifier: Apache-2.0
 *
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.twitter.clientlib.api;

import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.AddOrDeleteRulesRequest;
import com.twitter.clientlib.model.AddOrDeleteRulesResponse;
import com.twitter.clientlib.model.ComplianceJobStatus;
import com.twitter.clientlib.model.ComplianceJobType;
import com.twitter.clientlib.model.CreateBatchComplianceJobRequest;
import com.twitter.clientlib.model.CreateTweetRequest;
import com.twitter.clientlib.model.Error;
import com.twitter.clientlib.model.FilteredStreamingTweet;
import com.twitter.clientlib.model.GenericMultipleUsersLookupResponse;
import com.twitter.clientlib.model.GenericTweetsTimelineResponse;
import com.twitter.clientlib.model.GetRulesResponse;
import com.twitter.clientlib.model.Granularity;
import com.twitter.clientlib.model.HideReplyByIdRequest;
import com.twitter.clientlib.model.HideReplyByIdResponse;
import com.twitter.clientlib.model.ListAddMemberRequest;
import com.twitter.clientlib.model.ListCreateRequest;
import com.twitter.clientlib.model.ListCreateResponse;
import com.twitter.clientlib.model.ListDeleteResponse;
import com.twitter.clientlib.model.ListFollowRequest;
import com.twitter.clientlib.model.ListFollowedResponse;
import com.twitter.clientlib.model.ListLookupMultipleUsersLookupResponse;
import com.twitter.clientlib.model.ListMemberResponse;
import com.twitter.clientlib.model.ListPinRequest;
import com.twitter.clientlib.model.ListPinnedResponse;
import com.twitter.clientlib.model.ListUpdateRequest;
import com.twitter.clientlib.model.ListUpdateResponse;
import com.twitter.clientlib.model.ListsIdTweetsResponse;
import com.twitter.clientlib.model.MultiComplianceJobResponse;
import com.twitter.clientlib.model.MultiListNoPaginationResponse;
import com.twitter.clientlib.model.MultiListResponse;
import com.twitter.clientlib.model.MultiSpaceLookupResponse;
import com.twitter.clientlib.model.MultiTweetLookupResponse;
import com.twitter.clientlib.model.MultiUserLookupResponse;
import java.time.OffsetDateTime;
import java.util.Set;
import com.twitter.clientlib.model.SingleComplianceJobResponse;
import com.twitter.clientlib.model.SingleListLookupResponse;
import com.twitter.clientlib.model.SingleSpaceLookupResponse;
import com.twitter.clientlib.model.SingleTweetLookupResponse;
import com.twitter.clientlib.model.SingleUserLookupResponse;
import com.twitter.clientlib.model.StreamingTweet;
import com.twitter.clientlib.model.TweetCountsResponse;
import com.twitter.clientlib.model.TweetCreateResponse;
import com.twitter.clientlib.model.TweetDeleteResponse;
import com.twitter.clientlib.model.TweetSearchResponse;
import com.twitter.clientlib.model.UsersBlockingMutationResponse;
import com.twitter.clientlib.model.UsersFollowingCreateResponse;
import com.twitter.clientlib.model.UsersFollowingDeleteResponse;
import com.twitter.clientlib.model.UsersFollowingLookupResponse;
import com.twitter.clientlib.model.UsersIdBlockRequest;
import com.twitter.clientlib.model.UsersIdFollowRequest;
import com.twitter.clientlib.model.UsersIdLikedTweetsResponse;
import com.twitter.clientlib.model.UsersIdMuteRequest;
import com.twitter.clientlib.model.UsersLikesCreateRequest;
import com.twitter.clientlib.model.UsersLikesCreateResponse;
import com.twitter.clientlib.model.UsersLikesDeleteResponse;
import com.twitter.clientlib.model.UsersMutingMutationResponse;
import com.twitter.clientlib.model.UsersRetweetsCreateRequest;
import com.twitter.clientlib.model.UsersRetweetsCreateResponse;
import com.twitter.clientlib.model.UsersRetweetsDeleteResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.InputStream;

/**
 * API tests for TwitterApi
 */
@Ignore
public class TwitterApiTest {

    private final TwitterApi api = new TwitterApi();

    
    /**
     * Add/Delete rules
     *
     * Add or delete rules from a user&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOrDeleteRulesTest() throws ApiException {
        AddOrDeleteRulesRequest addOrDeleteRulesRequest = null;
        Boolean dryRun = null;
                AddOrDeleteRulesResponse response = api.addOrDeleteRules(addOrDeleteRulesRequest, dryRun);
        // TODO: test validations
    }
    
    /**
     * Create compliance job
     *
     * Creates a compliance for the given job type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBatchComplianceJobTest() throws ApiException {
        CreateBatchComplianceJobRequest createBatchComplianceJobRequest = null;
                SingleComplianceJobResponse response = api.createBatchComplianceJob(createBatchComplianceJobRequest);
        // TODO: test validations
    }
    
    /**
     * Creation of a Tweet
     *
     * Causes the user to create a tweet under the authorized account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTweetTest() throws ApiException {
        CreateTweetRequest createTweetRequest = null;
                TweetCreateResponse response = api.createTweet(createTweetRequest);
        // TODO: test validations
    }
    
    /**
     * Tweet delete by Tweet ID
     *
     * Delete specified Tweet (in the path) by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTweetByIdTest() throws ApiException {
        String id = null;
                TweetDeleteResponse response = api.deleteTweetById(id);
        // TODO: test validations
    }
    
    /**
     * User lookup me
     *
     * This endpoint returns information about the requesting user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findMyUserTest() throws ApiException {
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                SingleUserLookupResponse response = api.findMyUser(expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * Space lookup by Space ID
     *
     * Returns a variety of information about the Space specified by the requested ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSpaceByIdTest() throws ApiException {
        String id = null;
        Set<String> spaceFields = null;
        Set<String> expansions = null;
                SingleSpaceLookupResponse response = api.findSpaceById(id, spaceFields, expansions);
        // TODO: test validations
    }
    
    /**
     * Space lookup by their creators
     *
     * Returns a variety of information about the Spaces created by the provided User IDs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSpacesByCreatorIdsTest() throws ApiException {
        List<String> userIds = null;
        Set<String> spaceFields = null;
        Set<String> expansions = null;
                MultiSpaceLookupResponse response = api.findSpacesByCreatorIds(userIds, spaceFields, expansions);
        // TODO: test validations
    }
    
    /**
     * Space lookup up Space IDs
     *
     * Returns a variety of information about the Spaces specified by the requested IDs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSpacesByIdsTest() throws ApiException {
        List<String> ids = null;
        Set<String> spaceFields = null;
        Set<String> expansions = null;
                MultiSpaceLookupResponse response = api.findSpacesByIds(ids, spaceFields, expansions);
        // TODO: test validations
    }
    
    /**
     * Tweet lookup by Tweet ID
     *
     * Returns a variety of information about the Tweet specified by the requested ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTweetByIdTest() throws ApiException {
        String id = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
                SingleTweetLookupResponse response = api.findTweetById(id, expansions, tweetFields, userFields, mediaFields, placeFields, pollFields);
        // TODO: test validations
    }
    
    /**
     * Tweet lookup by Tweet IDs
     *
     * Returns a variety of information about the Tweet specified by the requested ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTweetsByIdTest() throws ApiException {
        List<String> ids = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
                MultiTweetLookupResponse response = api.findTweetsById(ids, expansions, tweetFields, userFields, mediaFields, placeFields, pollFields);
        // TODO: test validations
    }
    
    /**
     * User lookup by ID
     *
     * This endpoint returns information about a user. Specify user by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByIdTest() throws ApiException {
        String id = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                SingleUserLookupResponse response = api.findUserById(id, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * User lookup by username
     *
     * This endpoint returns information about a user. Specify user by username.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByUsernameTest() throws ApiException {
        String username = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                SingleUserLookupResponse response = api.findUserByUsername(username, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * User lookup by IDs
     *
     * This endpoint returns information about users. Specify users by their ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUsersByIdTest() throws ApiException {
        List<String> ids = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                MultiUserLookupResponse response = api.findUsersById(ids, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * User lookup by usernames
     *
     * This endpoint returns information about users. Specify users by their username.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUsersByUsernameTest() throws ApiException {
        List<String> usernames = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                MultiUserLookupResponse response = api.findUsersByUsername(usernames, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * Get compliance job
     *
     * Returns a single compliance job by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchComplianceJobTest() throws ApiException {
        String id = null;
                SingleComplianceJobResponse response = api.getBatchComplianceJob(id);
        // TODO: test validations
    }
    
    /**
     * Returns the open api spec document.
     *
     * Full open api spec in JSON format. (See https://github.com/OAI/OpenAPI-Specification/blob/master/README.md)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOpenApiSpecTest() throws ApiException {
                Object response = api.getOpenApiSpec();
        // TODO: test validations
    }
    
    /**
     * Rules lookup
     *
     * Returns rules from a user&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesTest() throws ApiException {
        List<String> ids = null;
        Integer maxResults = null;
        String paginationToken = null;
                GetRulesResponse response = api.getRules(ids, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Get a User&#39;s List Memberships
     *
     * Get a User&#39;s List Memberships.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserListMembershipsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> listFields = null;
        Set<String> expansions = null;
        Set<String> userFields = null;
                MultiListResponse response = api.getUserListMemberships(id, maxResults, paginationToken, listFields, expansions, userFields);
        // TODO: test validations
    }
    
    /**
     * Hide replies
     *
     * Hides or unhides a reply to an owned conversation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hideReplyByIdTest() throws ApiException {
        String id = null;
        HideReplyByIdRequest hideReplyByIdRequest = null;
                HideReplyByIdResponse response = api.hideReplyById(id, hideReplyByIdRequest);
        // TODO: test validations
    }
    
    /**
     * Add a List member
     *
     * Causes a user to become a member of a List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAddMemberTest() throws ApiException {
        String id = null;
        ListAddMemberRequest listAddMemberRequest = null;
                ListMemberResponse response = api.listAddMember(id, listAddMemberRequest);
        // TODO: test validations
    }
    
    /**
     * List compliance jobs
     *
     * Returns recent compliance jobs for a given job type and optional job status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBatchComplianceJobsTest() throws ApiException {
        ComplianceJobType type = null;
        ComplianceJobStatus status = null;
                MultiComplianceJobResponse response = api.listBatchComplianceJobs(type, status);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that follow a List by the provided List ID
     *
     * Returns a list of users that follow a List by the provided List ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listGetFollowersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                ListLookupMultipleUsersLookupResponse response = api.listGetFollowers(id, maxResults, paginationToken, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that are members of a List by the provided List ID
     *
     * Returns a list of users that are members of a List by the provided List ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listGetMembersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                ListLookupMultipleUsersLookupResponse response = api.listGetMembers(id, maxResults, paginationToken, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * Create List
     *
     * Creates a new List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIdCreateTest() throws ApiException {
        ListCreateRequest listCreateRequest = null;
                ListCreateResponse response = api.listIdCreate(listCreateRequest);
        // TODO: test validations
    }
    
    /**
     * Delete List
     *
     * Delete a List that you own.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIdDeleteTest() throws ApiException {
        String id = null;
                ListDeleteResponse response = api.listIdDelete(id);
        // TODO: test validations
    }
    
    /**
     * List lookup by List ID
     *
     * Returns a List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIdGetTest() throws ApiException {
        String id = null;
        Set<String> listFields = null;
        Set<String> expansions = null;
        Set<String> userFields = null;
                SingleListLookupResponse response = api.listIdGet(id, listFields, expansions, userFields);
        // TODO: test validations
    }
    
    /**
     * Update List
     *
     * Update a List that you own.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIdUpdateTest() throws ApiException {
        String id = null;
        ListUpdateRequest listUpdateRequest = null;
                ListUpdateResponse response = api.listIdUpdate(id, listUpdateRequest);
        // TODO: test validations
    }
    
    /**
     * Remove a List member
     *
     * Causes a user to be removed from the members of a List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRemoveMemberTest() throws ApiException {
        String id = null;
        String userId = null;
                ListMemberResponse response = api.listRemoveMember(id, userId);
        // TODO: test validations
    }
    
    /**
     * Follow a List
     *
     * Causes a user to follow a List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserFollowTest() throws ApiException {
        String id = null;
        ListFollowRequest listFollowRequest = null;
                ListFollowedResponse response = api.listUserFollow(id, listFollowRequest);
        // TODO: test validations
    }
    
    /**
     * Get a User&#39;s Owned Lists
     *
     * Get a User&#39;s Owned Lists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserOwnedListsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> listFields = null;
        Set<String> expansions = null;
        Set<String> userFields = null;
                MultiListResponse response = api.listUserOwnedLists(id, maxResults, paginationToken, listFields, expansions, userFields);
        // TODO: test validations
    }
    
    /**
     * Pin a List
     *
     * Causes a user to pin a List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserPinTest() throws ApiException {
        String id = null;
        ListPinRequest listPinRequest = null;
                ListPinnedResponse response = api.listUserPin(id, listPinRequest);
        // TODO: test validations
    }
    
    /**
     * Get a User&#39;s Pinned Lists
     *
     * Get a User&#39;s Pinned Lists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserPinnedListsTest() throws ApiException {
        String id = null;
        Set<String> listFields = null;
        Set<String> expansions = null;
        Set<String> userFields = null;
                MultiListNoPaginationResponse response = api.listUserPinnedLists(id, listFields, expansions, userFields);
        // TODO: test validations
    }
    
    /**
     * Unfollow a List
     *
     * Causes a user to unfollow a List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserUnfollowTest() throws ApiException {
        String id = null;
        String listId = null;
                ListFollowedResponse response = api.listUserUnfollow(id, listId);
        // TODO: test validations
    }
    
    /**
     * Unpin a List
     *
     * Causes a user to remove a pinned List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserUnpinTest() throws ApiException {
        String id = null;
        String listId = null;
                ListPinnedResponse response = api.listUserUnpin(id, listId);
        // TODO: test validations
    }
    
    /**
     * List Tweets timeline by List ID
     *
     * Returns a list of Tweets associated with the provided List ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listsIdTweetsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
                ListsIdTweetsResponse response = api.listsIdTweets(id, maxResults, paginationToken, expansions, tweetFields, userFields, mediaFields, placeFields, pollFields);
        // TODO: test validations
    }
    
    /**
     * Sample stream
     *
     * Streams a deterministic 1% of public Tweets.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sampleStreamTest() throws ApiException {
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
        Integer backfillMinutes = null;
                InputStream response = api.sampleStream(expansions, tweetFields, userFields, mediaFields, placeFields, pollFields, backfillMinutes);
        // TODO: test validations
    }
    
    /**
     * Search for Spaces
     *
     * Returns Spaces that match the provided query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchSpacesTest() throws ApiException {
        String query = null;
        String state = null;
        Integer maxResults = null;
        Set<String> spaceFields = null;
        Set<String> expansions = null;
                MultiSpaceLookupResponse response = api.searchSpaces(query, state, maxResults, spaceFields, expansions);
        // TODO: test validations
    }
    
    /**
     * Filtered stream
     *
     * Streams Tweets matching the stream&#39;s active rule set.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchStreamTest() throws ApiException {
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
        Integer backfillMinutes = null;
                InputStream response = api.searchStream(expansions, tweetFields, userFields, mediaFields, placeFields, pollFields, backfillMinutes);
        // TODO: test validations
    }
    
    /**
     * Full archive search counts
     *
     * Returns Tweet Counts that match a search query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tweetCountsFullArchiveSearchTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        String nextToken = null;
        Granularity granularity = null;
                TweetCountsResponse response = api.tweetCountsFullArchiveSearch(query, startTime, endTime, sinceId, untilId, nextToken, granularity);
        // TODO: test validations
    }
    
    /**
     * Recent search counts
     *
     * Returns Tweet Counts from the last 7 days that match a search query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tweetCountsRecentSearchTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        String nextToken = null;
        Granularity granularity = null;
                TweetCountsResponse response = api.tweetCountsRecentSearch(query, startTime, endTime, sinceId, untilId, nextToken, granularity);
        // TODO: test validations
    }
    
    /**
     * Full-archive search
     *
     * Returns Tweets that match a search query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tweetsFullarchiveSearchTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String nextToken = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
                TweetSearchResponse response = api.tweetsFullarchiveSearch(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, expansions, tweetFields, userFields, mediaFields, placeFields, pollFields);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that have liked the provided Tweet ID
     *
     * Returns a list of users that have liked the provided Tweet ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tweetsIdLikingUsersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = api.tweetsIdLikingUsers(id, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that have retweeted the provided Tweet ID
     *
     * Returns a list of users that have retweeted the provided Tweet ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tweetsIdRetweetingUsersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = api.tweetsIdRetweetingUsers(id, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Recent search
     *
     * Returns Tweets from the last 7 days that match a search query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tweetsRecentSearchTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String nextToken = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
                TweetSearchResponse response = api.tweetsRecentSearch(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, expansions, tweetFields, userFields, mediaFields, placeFields, pollFields);
        // TODO: test validations
    }
    
    /**
     * Get User&#39;s Followed Lists
     *
     * Returns a user&#39;s followed Lists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userFollowedListsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> listFields = null;
        Set<String> expansions = null;
        Set<String> userFields = null;
                MultiListResponse response = api.userFollowedLists(id, maxResults, paginationToken, listFields, expansions, userFields);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that follow the provided username
     *
     * Returns a list of users that follow the provided username
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usernameFollowersTest() throws ApiException {
        String username = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = api.usernameFollowers(username, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Following by username
     *
     * Returns a list of users that being followed by the provided username
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usernameFollowingTest() throws ApiException {
        String username = null;
        Integer maxResults = null;
        String paginationToken = null;
                UsersFollowingLookupResponse response = api.usernameFollowing(username, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * User mention timeline by username
     *
     * Returns Tweet objects that mention the provided username
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersByUsernameMentionsTest() throws ApiException {
        String username = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String paginationToken = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
                GenericTweetsTimelineResponse response = api.usersByUsernameMentions(username, sinceId, untilId, maxResults, paginationToken, startTime, endTime, expansions, tweetFields, userFields, mediaFields, placeFields, pollFields);
        // TODO: test validations
    }
    
    /**
     * User Tweets timeline by username
     *
     * Returns a list of Tweets authored by the provided username
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersByUsernameTweetsTest() throws ApiException {
        String username = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String paginationToken = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> exclude = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
                GenericTweetsTimelineResponse response = api.usersByUsernameTweets(username, sinceId, untilId, maxResults, paginationToken, startTime, endTime, exclude, expansions, tweetFields, userFields, mediaFields, placeFields, pollFields);
        // TODO: test validations
    }
    
    /**
     * Block User by User ID
     *
     * Causes the user (in the path) to block the target user. The user (in the path) must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdBlockTest() throws ApiException {
        String id = null;
        UsersIdBlockRequest usersIdBlockRequest = null;
                UsersBlockingMutationResponse response = api.usersIdBlock(id, usersIdBlockRequest);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that are blocked by provided user ID
     *
     * Returns a list of users that are blocked by the provided user ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdBlockingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = api.usersIdBlocking(id, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Follow User
     *
     * Causes the user(in the path) to follow, or “request to follow” for protected users, the target user. The user(in the path) must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdFollowTest() throws ApiException {
        String id = null;
        UsersIdFollowRequest usersIdFollowRequest = null;
                UsersFollowingCreateResponse response = api.usersIdFollow(id, usersIdFollowRequest);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that follow the provided user ID
     *
     * Returns a list of users that follow the provided user ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdFollowersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = api.usersIdFollowers(id, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Following by User ID
     *
     * Returns a list of users that are being followed by the provided user ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdFollowingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                UsersFollowingLookupResponse response = api.usersIdFollowing(id, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Causes the user (in the path) to like the specified tweet
     *
     * Causes the user (in the path) to like the specified tweet. The user in the path must match the user context authorizing the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdLikeTest() throws ApiException {
        String id = null;
        UsersLikesCreateRequest usersLikesCreateRequest = null;
                UsersLikesCreateResponse response = api.usersIdLike(id, usersLikesCreateRequest);
        // TODO: test validations
    }
    
    /**
     * Returns Tweet objects liked by the provided User ID
     *
     * Returns a list of Tweets liked by the provided User ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdLikedTweetsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
                UsersIdLikedTweetsResponse response = api.usersIdLikedTweets(id, maxResults, paginationToken, expansions, tweetFields, userFields, mediaFields, placeFields, pollFields);
        // TODO: test validations
    }
    
    /**
     * User mention timeline by User ID
     *
     * Returns Tweet objects that mention username associated to the provided User ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdMentionsTest() throws ApiException {
        String id = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String paginationToken = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
                GenericTweetsTimelineResponse response = api.usersIdMentions(id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, expansions, tweetFields, userFields, mediaFields, placeFields, pollFields);
        // TODO: test validations
    }
    
    /**
     * Mute User by User ID
     *
     * Causes the user (in the path) to mute the target user. The user (in the path) must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdMuteTest() throws ApiException {
        String id = null;
        UsersIdMuteRequest usersIdMuteRequest = null;
                UsersMutingMutationResponse response = api.usersIdMute(id, usersIdMuteRequest);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that are muted by the provided user ID
     *
     * Returns a list of users that are muted by the provided user ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdMutingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = api.usersIdMuting(id, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Causes the user (in the path) to retweet the specified tweet
     *
     * Causes the user (in the path) to retweet the specified tweet. The user in the path must match the user context authorizing the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdRetweetsTest() throws ApiException {
        String id = null;
        UsersRetweetsCreateRequest usersRetweetsCreateRequest = null;
                UsersRetweetsCreateResponse response = api.usersIdRetweets(id, usersRetweetsCreateRequest);
        // TODO: test validations
    }
    
    /**
     * User Tweets timeline by User ID
     *
     * Returns a list of Tweets authored by the provided User ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdTweetsTest() throws ApiException {
        String id = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        Set<String> exclude = null;
        String paginationToken = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
        Set<String> mediaFields = null;
        Set<String> placeFields = null;
        Set<String> pollFields = null;
                GenericTweetsTimelineResponse response = api.usersIdTweets(id, sinceId, untilId, maxResults, exclude, paginationToken, startTime, endTime, expansions, tweetFields, userFields, mediaFields, placeFields, pollFields);
        // TODO: test validations
    }
    
    /**
     * Unblock User by User ID
     *
     * Causes the source user to unblock the target user. The source user must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdUnblockTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
                UsersBlockingMutationResponse response = api.usersIdUnblock(sourceUserId, targetUserId);
        // TODO: test validations
    }
    
    /**
     * Unfollow User
     *
     * Causes the source user to unfollow the target user. The source user must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdUnfollowTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
                UsersFollowingDeleteResponse response = api.usersIdUnfollow(sourceUserId, targetUserId);
        // TODO: test validations
    }
    
    /**
     * Causes the user (in the path) to unlike the specified tweet
     *
     * Causes the user (in the path) to unlike the specified tweet. The user must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdUnlikeTest() throws ApiException {
        String id = null;
        String tweetId = null;
                UsersLikesDeleteResponse response = api.usersIdUnlike(id, tweetId);
        // TODO: test validations
    }
    
    /**
     * Unmute User by User ID
     *
     * Causes the source user to unmute the target user. The source user must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdUnmuteTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
                UsersMutingMutationResponse response = api.usersIdUnmute(sourceUserId, targetUserId);
        // TODO: test validations
    }
    
    /**
     * Causes the user (in the path) to unretweet the specified tweet
     *
     * Causes the user (in the path) to unretweet the specified tweet. The user must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdUnretweetsTest() throws ApiException {
        String id = null;
        String sourceTweetId = null;
                UsersRetweetsDeleteResponse response = api.usersIdUnretweets(id, sourceTweetId);
        // TODO: test validations
    }
    
}
