/*
 * Copyright 2020 Twitter, Inc.
 * SPDX-License-Identifier: Apache-2.0
 *
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.twitter.clientlib;


import java.util.HashSet;
import java.util.Set;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import com.twitter.clientlib.api.TwitterApi;
import com.twitter.clientlib.auth.*;
import com.twitter.clientlib.model.*;
import com.twitter.clientlib.model.Error;


public class HelloWorld {

  public static void main(String[] args) {

    // Credentials are taken from environment variables:
    //   TWITTER_BEARER_TOKEN, TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, TWITTER_TOKEN, TWITTER_TOKEN_SECRET
    // else instantiate TwitterApi with TwitterCredentials
    TwitterApi apiInstance = new TwitterApi();

    Set<String> tweetFields = new HashSet<>();
    tweetFields.add("rrrr");
    tweetFields.add("id");
    tweetFields.add("created_at");

    try {
      // findTweetById
//      SingleTweetLookupResponse result = apiInstance.findTweetById("20", null, tweetFields, null , null, null, null);
      AddOrDeleteRulesRequest r = new AddOrDeleteRulesRequest();
      AddRulesRequest add = new AddRulesRequest();
      RuleNoId rule = new RuleNoId();
      rule.setValue("Blue");
      add.addAddItem(rule);
      r.setActualInstance(add);
      AddOrDeleteRulesResponse result = apiInstance.addOrDeleteRules(r, false);


  /*    CreateTweetRequest req = new CreateTweetRequest();
//      req.setText("test api");
      TweetCreateResponse result = apiInstance.createTweet(req);
*/
//         TweetDeleteResponse result = apiInstance.deleteTweetById("1468307045992435712");
      System.out.println("result: " + result);


//      if(result.getErrors() != null && result.getErrors().size() > 0) {
//       System.out.println("Error:");
//
//       result.getErrors().forEach(e -> {
//         System.out.println(e.toString());
//         if (e instanceof ResourceUnauthorizedProblem) {
//           System.out.println(((ResourceUnauthorizedProblem) e).getTitle() + " " + ((ResourceUnauthorizedProblem) e).getDetail());
//         }
//       });
//     } else {
//       System.out.println("findTweetById - Tweet Text: " + result.toString());
//     }
    } catch (ApiException e) {
      Object o = e.getErrorObject().getActualInstance();
      if (o instanceof Error) {
        // do something here
      } else if (o instanceof GenericProblem) {
        // do something here
      } else if (o instanceof InvalidRequestProblem) {
        System.err.println("Status detail: " + ((InvalidRequestProblem) o).getDetail());
        System.err.println("InvalidRequestProblem: " + ((InvalidRequestProblem) o).toString());
      }
      System.err.println("Status code: " + e.getCode());
      System.err.println("Reason: " + e.getResponseBody());
      System.err.println("Response headers: " + e.getResponseHeaders());
//      e.printStackTrace();
    } catch (Exception e) {
      System.err.println("error: " + e);
    }
  }
}

